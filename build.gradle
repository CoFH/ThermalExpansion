buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.1.+'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'net.covers1624.signing' version '1.1.4'
}

apply plugin: 'net.minecraftforge.gradle'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

def signProps = [:]
if (System.getenv('KEY_STORE')) {
    println 'Using Env variables for jar signing.'
    signProps['keyStore'] = System.getenv('KEY_STORE')
    file(System.getenv('KEY_STORE_PROPS')).withReader {
        def props = new Properties()
        props.load(it)
        signProps.putAll(props)
    }
} else if (project.hasProperty('keyStore')) {
    println 'Using Project properties for jar signing.'
    signProps['keyStore'] = project.getProperty('keyStore')
    signProps['storePass'] = project.getProperty('keyStorePass')
    signProps['alias'] = project.getProperty('keyStoreAlias')
    signProps['keyPass'] = project.getProperty('keyStoreKeyPass')
} else {
    println 'No signing secrets found, build will not be signed.'
}

version = "${mc_version}-${mod_version}"
group = 'com.teamcofh'
archivesBaseName = "${mod_id}"

repositories {
    mavenLocal()
    maven {
        url 'https://maven.covers1624.net/'
    }
    maven { // TOP
        url 'https://maven.tterrag.com/'
    }
    maven { // JEI
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven { // Patchouli
        url 'https://maven.blamejared.com'
    }
}

def setupSourceSet(SourceSet sourceSet, String name) {
    sourceSet.java {
        srcDir 'src/' + name + '/java'
    }
    sourceSet.compileClasspath += sourceSets.main.output
}

minecraft {
    mappings channel: 'snapshot', version: "${mcp_mappings}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    evaluationDependsOn(':CoFHCore')

    runs {
        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"

            args '--all', '--output', file('src/generated/'),
                    '--mod', archivesBaseName,
                    '--existing', sourceSets.main.resources.srcDirs[0],
                    '--existing', new File(project(':ThermalCore').projectDir, "src/main/resources/")

            mods {
                CoFHCore {
                    source findProject(':CoFHCore').sourceSets.main
                }
                ThermalCore {
                    source findProject(':ThermalCore').sourceSets.main
                }
                ThermalExpansion {
                    source findProject(':ThermalExpansion').sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    if (findProject(':CoFHCore') != null) {
        compile project(':CoFHCore')
    } else {
        // TODO: Maven!
    }
    if (findProject(':ThermalCore') != null) {
        compile project(':ThermalCore')
    } else {
        // TODO: Maven!
    }
}

signing {
    if (!signProps.isEmpty()) {
        jars {
            sign jar
            after 'reobfJar'

            keyStore = signProps.keyStore
            alias = signProps.alias
            storePass = signProps.storePass
            keyPass = signProps.keyPass
        }
    }
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : "${mod_name}",
                'Specification-Vendor'    : 'Team CoFH',
                'Specification-Version'   : "${mc_version}",
                'Implementation-Title'    : "${mod_id}",
                'Implementation-Vendor'   : 'Team CoFH',
                'Implementation-Version'  : "${mod_version}",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
