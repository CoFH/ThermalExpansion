buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url 'https://maven.minecraftforge.net/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'net.covers1624.signing' version '1.1.4'
}
apply plugin: 'net.minecraftforge.gradle'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets.main.resources.srcDirs += "src/main/generated"

def signProps = [:]
if (System.getenv('KEY_STORE')) {
    println 'Using Env variables for jar signing.'
    signProps['keyStore'] = System.getenv('KEY_STORE')
    file(System.getenv('KEY_STORE_PROPS')).withReader {
        def props = new Properties()
        props.load(it)
        signProps.putAll(props)
    }
} else if (project.hasProperty('keyStore')) {
    println 'Using Project properties for jar signing.'
    signProps['keyStore'] = project.getProperty('keyStore')
    signProps['storePass'] = project.getProperty('keyStorePass')
    signProps['alias'] = project.getProperty('keyStoreAlias')
    signProps['keyPass'] = project.getProperty('keyStoreKeyPass')
} else {
    println 'No signing secrets found, build will not be signed.'
}

mod_version = "${mod_version}." + (System.getenv("BUILD_NUMBER") ?: "1")

version = "${mc_version}-${mod_version}"
group = 'com.teamcofh'
archivesBaseName = "${mod_id}"

repositories {
    mavenLocal()
    maven {
        url 'https://maven.covers1624.net/'
    }
    maven { // TOP
        url 'https://maven.tterrag.com/'
    }
    maven { // JEI
        url 'https://dvs1.progwml6.com/files/maven/'
    }
    maven { // Patchouli
        url 'https://maven.blamejared.com/'
    }
}

minecraft {
    mappings channel: 'official', version: "${mc_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"

            args '--all', '--output', file('src/generated/'),
                    '--mod', archivesBaseName,
                    '--existing', sourceSets.main.resources.srcDirs[0],
                    '--existing-mod', 'thermal'

            mods {
                ThermalExpansion {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation fg.deobf("com.teamcofh:cofh_core:${mc_version}-${cofh_core_version}")
    implementation fg.deobf("com.teamcofh:thermal_core:${mc_version}-${thermal_core_version}")

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // at runtime, use the full JEI
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-common:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    // runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
}

signing {
    if (!signProps.isEmpty()) {
        jars {
            sign jar
            after 'reobfJar'

            keyStore = signProps.keyStore
            alias = signProps.alias
            storePass = signProps.storePass
            keyPass = signProps.keyPass
        }
    }
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : "${mod_name}",
                'Specification-Vendor'    : 'Team CoFH',
                'Specification-Version'   : "${mc_version}",
                'Implementation-Title'    : "${mod_id}",
                'Implementation-Vendor'   : 'Team CoFH',
                'Implementation-Version'  : "${mod_version}",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task srcJar(type: Jar) {
    build.dependsOn it
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
    repositories {
        if (System.getenv('MAVEN_PASS')) {
            maven {
                url 'https://nexus.covers1624.net/repository/cofh-releases/'
                credentials {
                    username 'kinglemming'
                    password System.getenv('MAVEN_PASS')
                }
            }
        }
    }
    publications {
        mod(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
            artifact srcJar

            pom {
                name = archivesBaseName
                description = archivesBaseName
                url = "https://github.com/CoFH/${project.name}"
                scm {
                    url = "https://github.com/CoFH/${project.name}"
                    connection = "scm:git:git://github.com/CoFH/${project.name}.git"
                    connection = "scm:git:git@github.com:CoFH/${project.name}.git"
                }

                issueManagement {
                    system = 'discord'
                    url = 'https://discord.gg/uRKrnbH'
                }
                licenses {
                    license {
                        name = 'Don\'t Be a Jerk v2'
                        url = "https://github.com/CoFH/${project.name}/blob/main/README.md"
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'teamcofh'
                        name = 'Team CoFH'
                    }
                }
            }
        }
    }
}
